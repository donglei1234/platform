// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: knapsack.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MailService_Watch_FullMethodName      = "/mail.v1.MailService/Watch"
	MailService_UpdateMail_FullMethodName = "/mail.v1.MailService/UpdateMail"
	MailService_SendMail_FullMethodName   = "/mail.v1.MailService/SendMail"
)

// MailServiceClient is the client API for MailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailServiceClient interface {
	Watch(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (MailService_WatchClient, error)
	UpdateMail(ctx context.Context, in *UpdateMailRequest, opts ...grpc.CallOption) (*UpdateMailResponse, error)
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type mailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailServiceClient(cc grpc.ClientConnInterface) MailServiceClient {
	return &mailServiceClient{cc}
}

func (c *mailServiceClient) Watch(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (MailService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailService_ServiceDesc.Streams[0], MailService_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mailServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MailService_WatchClient interface {
	Recv() (*WatchMailResponse, error)
	grpc.ClientStream
}

type mailServiceWatchClient struct {
	grpc.ClientStream
}

func (x *mailServiceWatchClient) Recv() (*WatchMailResponse, error) {
	m := new(WatchMailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailServiceClient) UpdateMail(ctx context.Context, in *UpdateMailRequest, opts ...grpc.CallOption) (*UpdateMailResponse, error) {
	out := new(UpdateMailResponse)
	err := c.cc.Invoke(ctx, MailService_UpdateMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, MailService_SendMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServiceServer is the server API for MailService service.
// All implementations should embed UnimplementedMailServiceServer
// for forward compatibility
type MailServiceServer interface {
	Watch(*Nothing, MailService_WatchServer) error
	UpdateMail(context.Context, *UpdateMailRequest) (*UpdateMailResponse, error)
	SendMail(context.Context, *SendMailRequest) (*Nothing, error)
}

// UnimplementedMailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMailServiceServer struct {
}

func (UnimplementedMailServiceServer) Watch(*Nothing, MailService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedMailServiceServer) UpdateMail(context.Context, *UpdateMailRequest) (*UpdateMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMail not implemented")
}
func (UnimplementedMailServiceServer) SendMail(context.Context, *SendMailRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}

// UnsafeMailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailServiceServer will
// result in compilation errors.
type UnsafeMailServiceServer interface {
	mustEmbedUnimplementedMailServiceServer()
}

func RegisterMailServiceServer(s grpc.ServiceRegistrar, srv MailServiceServer) {
	s.RegisterService(&MailService_ServiceDesc, srv)
}

func _MailService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailServiceServer).Watch(m, &mailServiceWatchServer{stream})
}

type MailService_WatchServer interface {
	Send(*WatchMailResponse) error
	grpc.ServerStream
}

type mailServiceWatchServer struct {
	grpc.ServerStream
}

func (x *mailServiceWatchServer) Send(m *WatchMailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MailService_UpdateMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).UpdateMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_UpdateMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).UpdateMail(ctx, req.(*UpdateMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailService_ServiceDesc is the grpc.ServiceDesc for MailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.v1.MailService",
	HandlerType: (*MailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMail",
			Handler:    _MailService_UpdateMail_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _MailService_SendMail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _MailService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "knapsack.proto",
}
