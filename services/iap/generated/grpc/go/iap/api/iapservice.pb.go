// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: iap/api/iapservice.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_iap_api_iapservice_proto protoreflect.FileDescriptor

var file_iap_api_iapservice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x61, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x69, 0x61, 0x70, 0x2e,
	0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x69, 0x61, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb8, 0x01, 0x0a, 0x09, 0x49, 0x41, 0x50, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x41, 0x50,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x2e, 0x69, 0x61, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x61, 0x70, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x41, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x70, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x69, 0x61,
	0x70, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x69, 0x61, 0x70, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x41, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x61, 0x70, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x3a, 0x01,
	0x2a, 0x42, 0x0c, 0x5a, 0x0a, 0x69, 0x61, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_iap_api_iapservice_proto_goTypes = []interface{}{
	(*IAPRequest)(nil),  // 0: iap.pb.IAPRequest
	(*IAPResponse)(nil), // 1: iap.pb.IAPResponse
}
var file_iap_api_iapservice_proto_depIdxs = []int32{
	0, // 0: iap.pb.IAPPublic.CheckIAPToken:input_type -> iap.pb.IAPRequest
	0, // 1: iap.pb.IAPPublic.ConsumeCallBack:input_type -> iap.pb.IAPRequest
	1, // 2: iap.pb.IAPPublic.CheckIAPToken:output_type -> iap.pb.IAPResponse
	1, // 3: iap.pb.IAPPublic.ConsumeCallBack:output_type -> iap.pb.IAPResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_iap_api_iapservice_proto_init() }
func file_iap_api_iapservice_proto_init() {
	if File_iap_api_iapservice_proto != nil {
		return
	}
	file_iap_api_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iap_api_iapservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iap_api_iapservice_proto_goTypes,
		DependencyIndexes: file_iap_api_iapservice_proto_depIdxs,
	}.Build()
	File_iap_api_iapservice_proto = out.File
	file_iap_api_iapservice_proto_rawDesc = nil
	file_iap_api_iapservice_proto_goTypes = nil
	file_iap_api_iapservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IAPPublicClient is the client API for IAPPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAPPublicClient interface {
	CheckIAPToken(ctx context.Context, in *IAPRequest, opts ...grpc.CallOption) (*IAPResponse, error)
	ConsumeCallBack(ctx context.Context, in *IAPRequest, opts ...grpc.CallOption) (*IAPResponse, error)
}

type iAPPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewIAPPublicClient(cc grpc.ClientConnInterface) IAPPublicClient {
	return &iAPPublicClient{cc}
}

func (c *iAPPublicClient) CheckIAPToken(ctx context.Context, in *IAPRequest, opts ...grpc.CallOption) (*IAPResponse, error) {
	out := new(IAPResponse)
	err := c.cc.Invoke(ctx, "/iap.pb.IAPPublic/CheckIAPToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAPPublicClient) ConsumeCallBack(ctx context.Context, in *IAPRequest, opts ...grpc.CallOption) (*IAPResponse, error) {
	out := new(IAPResponse)
	err := c.cc.Invoke(ctx, "/iap.pb.IAPPublic/ConsumeCallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAPPublicServer is the server API for IAPPublic service.
type IAPPublicServer interface {
	CheckIAPToken(context.Context, *IAPRequest) (*IAPResponse, error)
	ConsumeCallBack(context.Context, *IAPRequest) (*IAPResponse, error)
}

// UnimplementedIAPPublicServer can be embedded to have forward compatible implementations.
type UnimplementedIAPPublicServer struct {
}

func (*UnimplementedIAPPublicServer) CheckIAPToken(context.Context, *IAPRequest) (*IAPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIAPToken not implemented")
}
func (*UnimplementedIAPPublicServer) ConsumeCallBack(context.Context, *IAPRequest) (*IAPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeCallBack not implemented")
}

func RegisterIAPPublicServer(s *grpc.Server, srv IAPPublicServer) {
	s.RegisterService(&_IAPPublic_serviceDesc, srv)
}

func _IAPPublic_CheckIAPToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAPPublicServer).CheckIAPToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iap.pb.IAPPublic/CheckIAPToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAPPublicServer).CheckIAPToken(ctx, req.(*IAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAPPublic_ConsumeCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAPPublicServer).ConsumeCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iap.pb.IAPPublic/ConsumeCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAPPublicServer).ConsumeCallBack(ctx, req.(*IAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAPPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iap.pb.IAPPublic",
	HandlerType: (*IAPPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIAPToken",
			Handler:    _IAPPublic_CheckIAPToken_Handler,
		},
		{
			MethodName: "ConsumeCallBack",
			Handler:    _IAPPublic_ConsumeCallBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iap/api/iapservice.proto",
}
