// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthPublic_Authenticate_FullMethodName      = "/auth.pb.AuthPublic/Authenticate"
	AuthPublic_ValidateToken_FullMethodName     = "/auth.pb.AuthPublic/ValidateToken"
	AuthPublic_AuthenticateRoom_FullMethodName  = "/auth.pb.AuthPublic/AuthenticateRoom"
	AuthPublic_ValidateRoomToken_FullMethodName = "/auth.pb.AuthPublic/ValidateRoomToken"
)

// AuthPublicClient is the client API for AuthPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthPublicClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	AuthenticateRoom(ctx context.Context, in *AuthenticateRoomRequest, opts ...grpc.CallOption) (*AuthenticateRoomResponse, error)
	ValidateRoomToken(ctx context.Context, in *ValidateRoomTokenRequest, opts ...grpc.CallOption) (*ValidateRoomTokenResponse, error)
}

type authPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthPublicClient(cc grpc.ClientConnInterface) AuthPublicClient {
	return &authPublicClient{cc}
}

func (c *authPublicClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, AuthPublic_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, AuthPublic_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicClient) AuthenticateRoom(ctx context.Context, in *AuthenticateRoomRequest, opts ...grpc.CallOption) (*AuthenticateRoomResponse, error) {
	out := new(AuthenticateRoomResponse)
	err := c.cc.Invoke(ctx, AuthPublic_AuthenticateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicClient) ValidateRoomToken(ctx context.Context, in *ValidateRoomTokenRequest, opts ...grpc.CallOption) (*ValidateRoomTokenResponse, error) {
	out := new(ValidateRoomTokenResponse)
	err := c.cc.Invoke(ctx, AuthPublic_ValidateRoomToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthPublicServer is the server API for AuthPublic service.
// All implementations should embed UnimplementedAuthPublicServer
// for forward compatibility
type AuthPublicServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	AuthenticateRoom(context.Context, *AuthenticateRoomRequest) (*AuthenticateRoomResponse, error)
	ValidateRoomToken(context.Context, *ValidateRoomTokenRequest) (*ValidateRoomTokenResponse, error)
}

// UnimplementedAuthPublicServer should be embedded to have forward compatible implementations.
type UnimplementedAuthPublicServer struct {
}

func (UnimplementedAuthPublicServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthPublicServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthPublicServer) AuthenticateRoom(context.Context, *AuthenticateRoomRequest) (*AuthenticateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateRoom not implemented")
}
func (UnimplementedAuthPublicServer) ValidateRoomToken(context.Context, *ValidateRoomTokenRequest) (*ValidateRoomTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRoomToken not implemented")
}

// UnsafeAuthPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthPublicServer will
// result in compilation errors.
type UnsafeAuthPublicServer interface {
	mustEmbedUnimplementedAuthPublicServer()
}

func RegisterAuthPublicServer(s grpc.ServiceRegistrar, srv AuthPublicServer) {
	s.RegisterService(&AuthPublic_ServiceDesc, srv)
}

func _AuthPublic_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublic_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublic_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublic_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublic_AuthenticateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicServer).AuthenticateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublic_AuthenticateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicServer).AuthenticateRoom(ctx, req.(*AuthenticateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublic_ValidateRoomToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRoomTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicServer).ValidateRoomToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublic_ValidateRoomToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicServer).ValidateRoomToken(ctx, req.(*ValidateRoomTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthPublic_ServiceDesc is the grpc.ServiceDesc for AuthPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.pb.AuthPublic",
	HandlerType: (*AuthPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthPublic_Authenticate_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthPublic_ValidateToken_Handler,
		},
		{
			MethodName: "AuthenticateRoom",
			Handler:    _AuthPublic_AuthenticateRoom_Handler,
		},
		{
			MethodName: "ValidateRoomToken",
			Handler:    _AuthPublic_ValidateRoomToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	AuthPrivate_Bind_FullMethodName = "/auth.pb.AuthPrivate/Bind"
)

// AuthPrivateClient is the client API for AuthPrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthPrivateClient interface {
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error)
}

type authPrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthPrivateClient(cc grpc.ClientConnInterface) AuthPrivateClient {
	return &authPrivateClient{cc}
}

func (c *authPrivateClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error) {
	out := new(BindResponse)
	err := c.cc.Invoke(ctx, AuthPrivate_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthPrivateServer is the server API for AuthPrivate service.
// All implementations should embed UnimplementedAuthPrivateServer
// for forward compatibility
type AuthPrivateServer interface {
	Bind(context.Context, *BindRequest) (*BindResponse, error)
}

// UnimplementedAuthPrivateServer should be embedded to have forward compatible implementations.
type UnimplementedAuthPrivateServer struct {
}

func (UnimplementedAuthPrivateServer) Bind(context.Context, *BindRequest) (*BindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}

// UnsafeAuthPrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthPrivateServer will
// result in compilation errors.
type UnsafeAuthPrivateServer interface {
	mustEmbedUnimplementedAuthPrivateServer()
}

func RegisterAuthPrivateServer(s grpc.ServiceRegistrar, srv AuthPrivateServer) {
	s.RegisterService(&AuthPrivate_ServiceDesc, srv)
}

func _AuthPrivate_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPrivateServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPrivate_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPrivateServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthPrivate_ServiceDesc is the grpc.ServiceDesc for AuthPrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthPrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.pb.AuthPrivate",
	HandlerType: (*AuthPrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _AuthPrivate_Bind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
