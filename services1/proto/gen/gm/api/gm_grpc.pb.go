// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GmService_SetProfilesBanStatus_FullMethodName = "/gm.v1.GmService/SetProfilesBanStatus"
	GmService_WatchProfilesBan_FullMethodName     = "/gm.v1.GmService/WatchProfilesBan"
	GmService_GetProfilesBanStatus_FullMethodName = "/gm.v1.GmService/GetProfilesBanStatus"
	GmService_SendBulletin_FullMethodName         = "/gm.v1.GmService/SendBulletin"
	GmService_GetBulletin_FullMethodName          = "/gm.v1.GmService/GetBulletin"
	GmService_GetPurchaseRecord_FullMethodName    = "/gm.v1.GmService/GetPurchaseRecord"
	GmService_ReissuePurchase_FullMethodName      = "/gm.v1.GmService/ReissuePurchase"
)

// GmServiceClient is the client API for GmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmServiceClient interface {
	// 封停、解封、解封时间、封停原因
	SetProfilesBanStatus(ctx context.Context, in *SetProfilesBanStatusRequest, opts ...grpc.CallOption) (*Nothing, error)
	// watch 黑名单信息变化
	WatchProfilesBan(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (GmService_WatchProfilesBanClient, error)
	// 获取当前封停的账号信息
	GetProfilesBanStatus(ctx context.Context, in *GetProfilesBanStatusRequest, opts ...grpc.CallOption) (*GetProfilesBanStatusResponse, error)
	// 发送游戏内公告
	SendBulletin(ctx context.Context, in *SendBulletinRequest, opts ...grpc.CallOption) (*Nothing, error)
	// 获取游戏当前公告信息
	GetBulletin(ctx context.Context, in *GetBulletinRequest, opts ...grpc.CallOption) (*GetBulletinResponse, error)
	// 根据账号或订单号查询充值金额、充值时间、是否到账
	GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error)
	// 根据掉单订单号进行补单(每个订单只可进行一次成功补单）
	ReissuePurchase(ctx context.Context, in *ReissuePurchaseRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type gmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGmServiceClient(cc grpc.ClientConnInterface) GmServiceClient {
	return &gmServiceClient{cc}
}

func (c *gmServiceClient) SetProfilesBanStatus(ctx context.Context, in *SetProfilesBanStatusRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, GmService_SetProfilesBanStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) WatchProfilesBan(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (GmService_WatchProfilesBanClient, error) {
	stream, err := c.cc.NewStream(ctx, &GmService_ServiceDesc.Streams[0], GmService_WatchProfilesBan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gmServiceWatchProfilesBanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GmService_WatchProfilesBanClient interface {
	Recv() (*ProfilesBanChanges, error)
	grpc.ClientStream
}

type gmServiceWatchProfilesBanClient struct {
	grpc.ClientStream
}

func (x *gmServiceWatchProfilesBanClient) Recv() (*ProfilesBanChanges, error) {
	m := new(ProfilesBanChanges)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gmServiceClient) GetProfilesBanStatus(ctx context.Context, in *GetProfilesBanStatusRequest, opts ...grpc.CallOption) (*GetProfilesBanStatusResponse, error) {
	out := new(GetProfilesBanStatusResponse)
	err := c.cc.Invoke(ctx, GmService_GetProfilesBanStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) SendBulletin(ctx context.Context, in *SendBulletinRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, GmService_SendBulletin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) GetBulletin(ctx context.Context, in *GetBulletinRequest, opts ...grpc.CallOption) (*GetBulletinResponse, error) {
	out := new(GetBulletinResponse)
	err := c.cc.Invoke(ctx, GmService_GetBulletin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordResponse, error) {
	out := new(GetPurchaseRecordResponse)
	err := c.cc.Invoke(ctx, GmService_GetPurchaseRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) ReissuePurchase(ctx context.Context, in *ReissuePurchaseRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, GmService_ReissuePurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmServiceServer is the server API for GmService service.
// All implementations should embed UnimplementedGmServiceServer
// for forward compatibility
type GmServiceServer interface {
	// 封停、解封、解封时间、封停原因
	SetProfilesBanStatus(context.Context, *SetProfilesBanStatusRequest) (*Nothing, error)
	// watch 黑名单信息变化
	WatchProfilesBan(*Nothing, GmService_WatchProfilesBanServer) error
	// 获取当前封停的账号信息
	GetProfilesBanStatus(context.Context, *GetProfilesBanStatusRequest) (*GetProfilesBanStatusResponse, error)
	// 发送游戏内公告
	SendBulletin(context.Context, *SendBulletinRequest) (*Nothing, error)
	// 获取游戏当前公告信息
	GetBulletin(context.Context, *GetBulletinRequest) (*GetBulletinResponse, error)
	// 根据账号或订单号查询充值金额、充值时间、是否到账
	GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error)
	// 根据掉单订单号进行补单(每个订单只可进行一次成功补单）
	ReissuePurchase(context.Context, *ReissuePurchaseRequest) (*Nothing, error)
}

// UnimplementedGmServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGmServiceServer struct {
}

func (UnimplementedGmServiceServer) SetProfilesBanStatus(context.Context, *SetProfilesBanStatusRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfilesBanStatus not implemented")
}
func (UnimplementedGmServiceServer) WatchProfilesBan(*Nothing, GmService_WatchProfilesBanServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchProfilesBan not implemented")
}
func (UnimplementedGmServiceServer) GetProfilesBanStatus(context.Context, *GetProfilesBanStatusRequest) (*GetProfilesBanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilesBanStatus not implemented")
}
func (UnimplementedGmServiceServer) SendBulletin(context.Context, *SendBulletinRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulletin not implemented")
}
func (UnimplementedGmServiceServer) GetBulletin(context.Context, *GetBulletinRequest) (*GetBulletinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulletin not implemented")
}
func (UnimplementedGmServiceServer) GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseRecord not implemented")
}
func (UnimplementedGmServiceServer) ReissuePurchase(context.Context, *ReissuePurchaseRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReissuePurchase not implemented")
}

// UnsafeGmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmServiceServer will
// result in compilation errors.
type UnsafeGmServiceServer interface {
	mustEmbedUnimplementedGmServiceServer()
}

func RegisterGmServiceServer(s grpc.ServiceRegistrar, srv GmServiceServer) {
	s.RegisterService(&GmService_ServiceDesc, srv)
}

func _GmService_SetProfilesBanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfilesBanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).SetProfilesBanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_SetProfilesBanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).SetProfilesBanStatus(ctx, req.(*SetProfilesBanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_WatchProfilesBan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GmServiceServer).WatchProfilesBan(m, &gmServiceWatchProfilesBanServer{stream})
}

type GmService_WatchProfilesBanServer interface {
	Send(*ProfilesBanChanges) error
	grpc.ServerStream
}

type gmServiceWatchProfilesBanServer struct {
	grpc.ServerStream
}

func (x *gmServiceWatchProfilesBanServer) Send(m *ProfilesBanChanges) error {
	return x.ServerStream.SendMsg(m)
}

func _GmService_GetProfilesBanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesBanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).GetProfilesBanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_GetProfilesBanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).GetProfilesBanStatus(ctx, req.(*GetProfilesBanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_SendBulletin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulletinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).SendBulletin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_SendBulletin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).SendBulletin(ctx, req.(*SendBulletinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_GetBulletin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulletinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).GetBulletin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_GetBulletin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).GetBulletin(ctx, req.(*GetBulletinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_GetPurchaseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).GetPurchaseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_GetPurchaseRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).GetPurchaseRecord(ctx, req.(*GetPurchaseRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_ReissuePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReissuePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).ReissuePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_ReissuePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).ReissuePurchase(ctx, req.(*ReissuePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GmService_ServiceDesc is the grpc.ServiceDesc for GmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gm.v1.GmService",
	HandlerType: (*GmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetProfilesBanStatus",
			Handler:    _GmService_SetProfilesBanStatus_Handler,
		},
		{
			MethodName: "GetProfilesBanStatus",
			Handler:    _GmService_GetProfilesBanStatus_Handler,
		},
		{
			MethodName: "SendBulletin",
			Handler:    _GmService_SendBulletin_Handler,
		},
		{
			MethodName: "GetBulletin",
			Handler:    _GmService_GetBulletin_Handler,
		},
		{
			MethodName: "GetPurchaseRecord",
			Handler:    _GmService_GetPurchaseRecord_Handler,
		},
		{
			MethodName: "ReissuePurchase",
			Handler:    _GmService_ReissuePurchase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchProfilesBan",
			Handler:       _GmService_WatchProfilesBan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gm.proto",
}
