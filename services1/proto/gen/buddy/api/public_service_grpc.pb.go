// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: public_service.proto

package buddy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicService_AddBuddy_FullMethodName              = "/buddy.pb.PublicService/AddBuddy"
	PublicService_RemoveBuddy_FullMethodName           = "/buddy.pb.PublicService/RemoveBuddy"
	PublicService_GetBuddies_FullMethodName            = "/buddy.pb.PublicService/GetBuddies"
	PublicService_IsInvited_FullMethodName             = "/buddy.pb.PublicService/IsInvited"
	PublicService_ReplyAddBuddy_FullMethodName         = "/buddy.pb.PublicService/ReplyAddBuddy"
	PublicService_WatchBuddies_FullMethodName          = "/buddy.pb.PublicService/WatchBuddies"
	PublicService_Remark_FullMethodName                = "/buddy.pb.PublicService/Remark"
	PublicService_UpdateBuddySettings_FullMethodName   = "/buddy.pb.PublicService/UpdateBuddySettings"
	PublicService_GetBlockedProfiles_FullMethodName    = "/buddy.pb.PublicService/GetBlockedProfiles"
	PublicService_AddBlockedProfiles_FullMethodName    = "/buddy.pb.PublicService/AddBlockedProfiles"
	PublicService_RemoveBlockedProfiles_FullMethodName = "/buddy.pb.PublicService/RemoveBlockedProfiles"
	PublicService_AddToRecentMet_FullMethodName        = "/buddy.pb.PublicService/AddToRecentMet"
	PublicService_StarBuddy_FullMethodName             = "/buddy.pb.PublicService/StarBuddy"
	PublicService_FavoriteBuddy_FullMethodName         = "/buddy.pb.PublicService/FavoriteBuddy"
	PublicService_CollectBuddyReward_FullMethodName    = "/buddy.pb.PublicService/CollectBuddyReward"
)

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	// AddBuddy adds a buddy to the current user's queue.
	// The requested buddy must accept via ReplyAddBuddy to fulfill the request.
	AddBuddy(ctx context.Context, in *AddBuddyRequest, opts ...grpc.CallOption) (*AddBuddyResponse, error)
	// RemoveBuddy removes a buddy from the current user's queue.
	// No corresponding acknowledgement is needed from the removed buddy.
	RemoveBuddy(ctx context.Context, in *RemoveBuddyRequest, opts ...grpc.CallOption) (*Nothing, error)
	// GetBuddies returns the current user's buddies.
	GetBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Buddies, error)
	// GetBuddies returns the current user's buddies.
	IsInvited(ctx context.Context, in *IsInvitedRequest, opts ...grpc.CallOption) (*IsInvitedResponse, error)
	// ReplyAddBuddy is called to accept or reject a buddy add request.
	ReplyAddBuddy(ctx context.Context, in *ReplyAddBuddyRequest, opts ...grpc.CallOption) (*ReplyAddBuddyResponse, error)
	// WatchBuddies returns a stream on which changes to the current user's
	//buddies and blocked list  and recent met will be sent.
	WatchBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (PublicService_WatchBuddiesClient, error)
	// Remark adds a buddy remark.
	Remark(ctx context.Context, in *RemarkRequest, opts ...grpc.CallOption) (*Nothing, error)
	// UpdateBuddySettings is called to update the current user's settings of buddy module.
	UpdateBuddySettings(ctx context.Context, in *UpdateBuddySettingsRequest, opts ...grpc.CallOption) (*Nothing, error)
	//---------------------------------------------Blocked List Start------------------------------------
	// GetBlockedUsers returns the current user's blocked users.
	GetBlockedProfiles(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ProfileIds, error)
	//AddBlockedUsers is called to add users to self's buddy list or blocked list
	AddBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error)
	//RemoveBlockedUsers is called to remove users to self's buddy list or blocked list
	RemoveBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error)
	//---------------------------------------------RecentMet Start----------------------------------------
	//AddToRecentMet  add player to user's recentMet. player self will be filtered
	AddToRecentMet(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error)
	// LikeBuddyRequest is used to request a user be liked as a buddy.
	StarBuddy(ctx context.Context, in *StarBuddyRequest, opts ...grpc.CallOption) (*Nothing, error)
	// FavoriteBuddyRequest is used to request a user be favorited as a buddy.
	FavoriteBuddy(ctx context.Context, in *FavoriteBuddyRequest, opts ...grpc.CallOption) (*Nothing, error)
	// CollectBuddyReward
	CollectBuddyReward(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*CollectBuddyRewardResponse, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) AddBuddy(ctx context.Context, in *AddBuddyRequest, opts ...grpc.CallOption) (*AddBuddyResponse, error) {
	out := new(AddBuddyResponse)
	err := c.cc.Invoke(ctx, PublicService_AddBuddy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) RemoveBuddy(ctx context.Context, in *RemoveBuddyRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_RemoveBuddy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Buddies, error) {
	out := new(Buddies)
	err := c.cc.Invoke(ctx, PublicService_GetBuddies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) IsInvited(ctx context.Context, in *IsInvitedRequest, opts ...grpc.CallOption) (*IsInvitedResponse, error) {
	out := new(IsInvitedResponse)
	err := c.cc.Invoke(ctx, PublicService_IsInvited_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ReplyAddBuddy(ctx context.Context, in *ReplyAddBuddyRequest, opts ...grpc.CallOption) (*ReplyAddBuddyResponse, error) {
	out := new(ReplyAddBuddyResponse)
	err := c.cc.Invoke(ctx, PublicService_ReplyAddBuddy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) WatchBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (PublicService_WatchBuddiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[0], PublicService_WatchBuddies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceWatchBuddiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicService_WatchBuddiesClient interface {
	Recv() (*BuddyChanges, error)
	grpc.ClientStream
}

type publicServiceWatchBuddiesClient struct {
	grpc.ClientStream
}

func (x *publicServiceWatchBuddiesClient) Recv() (*BuddyChanges, error) {
	m := new(BuddyChanges)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) Remark(ctx context.Context, in *RemarkRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_Remark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) UpdateBuddySettings(ctx context.Context, in *UpdateBuddySettingsRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_UpdateBuddySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetBlockedProfiles(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ProfileIds, error) {
	out := new(ProfileIds)
	err := c.cc.Invoke(ctx, PublicService_GetBlockedProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) AddBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_AddBlockedProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) RemoveBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_RemoveBlockedProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) AddToRecentMet(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_AddToRecentMet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) StarBuddy(ctx context.Context, in *StarBuddyRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_StarBuddy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) FavoriteBuddy(ctx context.Context, in *FavoriteBuddyRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, PublicService_FavoriteBuddy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) CollectBuddyReward(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*CollectBuddyRewardResponse, error) {
	out := new(CollectBuddyRewardResponse)
	err := c.cc.Invoke(ctx, PublicService_CollectBuddyReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations should embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	// AddBuddy adds a buddy to the current user's queue.
	// The requested buddy must accept via ReplyAddBuddy to fulfill the request.
	AddBuddy(context.Context, *AddBuddyRequest) (*AddBuddyResponse, error)
	// RemoveBuddy removes a buddy from the current user's queue.
	// No corresponding acknowledgement is needed from the removed buddy.
	RemoveBuddy(context.Context, *RemoveBuddyRequest) (*Nothing, error)
	// GetBuddies returns the current user's buddies.
	GetBuddies(context.Context, *Nothing) (*Buddies, error)
	// GetBuddies returns the current user's buddies.
	IsInvited(context.Context, *IsInvitedRequest) (*IsInvitedResponse, error)
	// ReplyAddBuddy is called to accept or reject a buddy add request.
	ReplyAddBuddy(context.Context, *ReplyAddBuddyRequest) (*ReplyAddBuddyResponse, error)
	// WatchBuddies returns a stream on which changes to the current user's
	//buddies and blocked list  and recent met will be sent.
	WatchBuddies(*Nothing, PublicService_WatchBuddiesServer) error
	// Remark adds a buddy remark.
	Remark(context.Context, *RemarkRequest) (*Nothing, error)
	// UpdateBuddySettings is called to update the current user's settings of buddy module.
	UpdateBuddySettings(context.Context, *UpdateBuddySettingsRequest) (*Nothing, error)
	//---------------------------------------------Blocked List Start------------------------------------
	// GetBlockedUsers returns the current user's blocked users.
	GetBlockedProfiles(context.Context, *Nothing) (*ProfileIds, error)
	//AddBlockedUsers is called to add users to self's buddy list or blocked list
	AddBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error)
	//RemoveBlockedUsers is called to remove users to self's buddy list or blocked list
	RemoveBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error)
	//---------------------------------------------RecentMet Start----------------------------------------
	//AddToRecentMet  add player to user's recentMet. player self will be filtered
	AddToRecentMet(context.Context, *ProfileIds) (*Nothing, error)
	// LikeBuddyRequest is used to request a user be liked as a buddy.
	StarBuddy(context.Context, *StarBuddyRequest) (*Nothing, error)
	// FavoriteBuddyRequest is used to request a user be favorited as a buddy.
	FavoriteBuddy(context.Context, *FavoriteBuddyRequest) (*Nothing, error)
	// CollectBuddyReward
	CollectBuddyReward(context.Context, *ProfileIds) (*CollectBuddyRewardResponse, error)
}

// UnimplementedPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) AddBuddy(context.Context, *AddBuddyRequest) (*AddBuddyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBuddy not implemented")
}
func (UnimplementedPublicServiceServer) RemoveBuddy(context.Context, *RemoveBuddyRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBuddy not implemented")
}
func (UnimplementedPublicServiceServer) GetBuddies(context.Context, *Nothing) (*Buddies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuddies not implemented")
}
func (UnimplementedPublicServiceServer) IsInvited(context.Context, *IsInvitedRequest) (*IsInvitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInvited not implemented")
}
func (UnimplementedPublicServiceServer) ReplyAddBuddy(context.Context, *ReplyAddBuddyRequest) (*ReplyAddBuddyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyAddBuddy not implemented")
}
func (UnimplementedPublicServiceServer) WatchBuddies(*Nothing, PublicService_WatchBuddiesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBuddies not implemented")
}
func (UnimplementedPublicServiceServer) Remark(context.Context, *RemarkRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remark not implemented")
}
func (UnimplementedPublicServiceServer) UpdateBuddySettings(context.Context, *UpdateBuddySettingsRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuddySettings not implemented")
}
func (UnimplementedPublicServiceServer) GetBlockedProfiles(context.Context, *Nothing) (*ProfileIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedProfiles not implemented")
}
func (UnimplementedPublicServiceServer) AddBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockedProfiles not implemented")
}
func (UnimplementedPublicServiceServer) RemoveBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlockedProfiles not implemented")
}
func (UnimplementedPublicServiceServer) AddToRecentMet(context.Context, *ProfileIds) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToRecentMet not implemented")
}
func (UnimplementedPublicServiceServer) StarBuddy(context.Context, *StarBuddyRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarBuddy not implemented")
}
func (UnimplementedPublicServiceServer) FavoriteBuddy(context.Context, *FavoriteBuddyRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteBuddy not implemented")
}
func (UnimplementedPublicServiceServer) CollectBuddyReward(context.Context, *ProfileIds) (*CollectBuddyRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectBuddyReward not implemented")
}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_AddBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).AddBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_AddBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).AddBuddy(ctx, req.(*AddBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_RemoveBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).RemoveBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_RemoveBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).RemoveBuddy(ctx, req.(*RemoveBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetBuddies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetBuddies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetBuddies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetBuddies(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_IsInvited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInvitedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).IsInvited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_IsInvited_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).IsInvited(ctx, req.(*IsInvitedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ReplyAddBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyAddBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ReplyAddBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_ReplyAddBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ReplyAddBuddy(ctx, req.(*ReplyAddBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_WatchBuddies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServiceServer).WatchBuddies(m, &publicServiceWatchBuddiesServer{stream})
}

type PublicService_WatchBuddiesServer interface {
	Send(*BuddyChanges) error
	grpc.ServerStream
}

type publicServiceWatchBuddiesServer struct {
	grpc.ServerStream
}

func (x *publicServiceWatchBuddiesServer) Send(m *BuddyChanges) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicService_Remark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Remark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_Remark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Remark(ctx, req.(*RemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_UpdateBuddySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuddySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).UpdateBuddySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_UpdateBuddySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).UpdateBuddySettings(ctx, req.(*UpdateBuddySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetBlockedProfiles(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_AddBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).AddBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_AddBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).AddBlockedProfiles(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_RemoveBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).RemoveBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_RemoveBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).RemoveBlockedProfiles(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_AddToRecentMet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).AddToRecentMet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_AddToRecentMet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).AddToRecentMet(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_StarBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).StarBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_StarBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).StarBuddy(ctx, req.(*StarBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_FavoriteBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).FavoriteBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_FavoriteBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).FavoriteBuddy(ctx, req.(*FavoriteBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_CollectBuddyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).CollectBuddyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_CollectBuddyReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).CollectBuddyReward(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buddy.pb.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBuddy",
			Handler:    _PublicService_AddBuddy_Handler,
		},
		{
			MethodName: "RemoveBuddy",
			Handler:    _PublicService_RemoveBuddy_Handler,
		},
		{
			MethodName: "GetBuddies",
			Handler:    _PublicService_GetBuddies_Handler,
		},
		{
			MethodName: "IsInvited",
			Handler:    _PublicService_IsInvited_Handler,
		},
		{
			MethodName: "ReplyAddBuddy",
			Handler:    _PublicService_ReplyAddBuddy_Handler,
		},
		{
			MethodName: "Remark",
			Handler:    _PublicService_Remark_Handler,
		},
		{
			MethodName: "UpdateBuddySettings",
			Handler:    _PublicService_UpdateBuddySettings_Handler,
		},
		{
			MethodName: "GetBlockedProfiles",
			Handler:    _PublicService_GetBlockedProfiles_Handler,
		},
		{
			MethodName: "AddBlockedProfiles",
			Handler:    _PublicService_AddBlockedProfiles_Handler,
		},
		{
			MethodName: "RemoveBlockedProfiles",
			Handler:    _PublicService_RemoveBlockedProfiles_Handler,
		},
		{
			MethodName: "AddToRecentMet",
			Handler:    _PublicService_AddToRecentMet_Handler,
		},
		{
			MethodName: "StarBuddy",
			Handler:    _PublicService_StarBuddy_Handler,
		},
		{
			MethodName: "FavoriteBuddy",
			Handler:    _PublicService_FavoriteBuddy_Handler,
		},
		{
			MethodName: "CollectBuddyReward",
			Handler:    _PublicService_CollectBuddyReward_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBuddies",
			Handler:       _PublicService_WatchBuddies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "public_service.proto",
}
