// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: condition.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConditionService_Watch_FullMethodName      = "/condition.pb.ConditionService/Watch"
	ConditionService_Register_FullMethodName   = "/condition.pb.ConditionService/Register"
	ConditionService_Unregister_FullMethodName = "/condition.pb.ConditionService/Unregister"
	ConditionService_Update_FullMethodName     = "/condition.pb.ConditionService/Update"
)

// ConditionServiceClient is the client API for ConditionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConditionServiceClient interface {
	Watch(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (ConditionService_WatchClient, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Nothing, error)
	Unregister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*Nothing, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type conditionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConditionServiceClient(cc grpc.ClientConnInterface) ConditionServiceClient {
	return &conditionServiceClient{cc}
}

func (c *conditionServiceClient) Watch(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (ConditionService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConditionService_ServiceDesc.Streams[0], ConditionService_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &conditionServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConditionService_WatchClient interface {
	Recv() (*Changes, error)
	grpc.ClientStream
}

type conditionServiceWatchClient struct {
	grpc.ClientStream
}

func (x *conditionServiceWatchClient) Recv() (*Changes, error) {
	m := new(Changes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conditionServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ConditionService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) Unregister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ConditionService_Unregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ConditionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConditionServiceServer is the server API for ConditionService service.
// All implementations should embed UnimplementedConditionServiceServer
// for forward compatibility
type ConditionServiceServer interface {
	Watch(*Nothing, ConditionService_WatchServer) error
	Register(context.Context, *RegisterRequest) (*Nothing, error)
	Unregister(context.Context, *UnRegisterRequest) (*Nothing, error)
	Update(context.Context, *UpdateRequest) (*Nothing, error)
}

// UnimplementedConditionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConditionServiceServer struct {
}

func (UnimplementedConditionServiceServer) Watch(*Nothing, ConditionService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedConditionServiceServer) Register(context.Context, *RegisterRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConditionServiceServer) Unregister(context.Context, *UnRegisterRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedConditionServiceServer) Update(context.Context, *UpdateRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeConditionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConditionServiceServer will
// result in compilation errors.
type UnsafeConditionServiceServer interface {
	mustEmbedUnimplementedConditionServiceServer()
}

func RegisterConditionServiceServer(s grpc.ServiceRegistrar, srv ConditionServiceServer) {
	s.RegisterService(&ConditionService_ServiceDesc, srv)
}

func _ConditionService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConditionServiceServer).Watch(m, &conditionServiceWatchServer{stream})
}

type ConditionService_WatchServer interface {
	Send(*Changes) error
	grpc.ServerStream
}

type conditionServiceWatchServer struct {
	grpc.ServerStream
}

func (x *conditionServiceWatchServer) Send(m *Changes) error {
	return x.ServerStream.SendMsg(m)
}

func _ConditionService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).Unregister(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConditionService_ServiceDesc is the grpc.ServiceDesc for ConditionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConditionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "condition.pb.ConditionService",
	HandlerType: (*ConditionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ConditionService_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _ConditionService_Unregister_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConditionService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ConditionService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "condition.proto",
}
